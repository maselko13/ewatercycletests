name: pull-check
run-name: pullCheck
on:
   pull_request:
       types: [ reopened, opened ]
jobs:
  Test-request-file:
    # ensures only plugin addition pull requests are checked
    if: startsWith(github.event.pull_request.title, 'add model:') &&  github.event.pull_request.base.ref == 'main' 
    runs-on: self-hosted
    steps:
        - name: checkout submission branch
          uses: actions/checkout@v4
          with: 
               ref: ${{github.head_ref}}
        - name: create-directory-for-model-repo
          run: mkdir second
        - name: model-list-tests
          run: conda run -n ewatercycle --no-capture-output python ModelsModificationTests.py
          # the submission file test outputs the path to the plugin file repository, which is stored as a a variable in order to clone it in the next step.
        - name: model-list-tests-as-output
          run: echo "REPO=$(conda run -n ewatercycle --no-capture-output python ModelsModificationTests.py)" >> "$GITHUB_ENV" 
        - name: clone-repo
          uses: actions/checkout@v4
          with:
              repository: ${{env.REPO}}
              ref: main
              path: second
        - name: move-model-file
          run: mv -f second/Mocks.py .
        - name: move-submission-file
          run: mv -f second/submission.yml .
        - name: submission-file-tests
          run: conda run -n ewatercycle --no-capture-output python PluginSubmissionTests.py
  Test-model:
    needs: Test-request-file
    # ensures only plugin addition pull requests are checked
    if: startsWith(github.event.pull_request.title, 'add model:') &&  github.event.pull_request.base.ref == 'main' 
    runs-on: self-hosted
    permissions:
      contents: write
    steps:  
        - name: clone-repo
          uses: actions/checkout@v4
          with:
              ref: main
              repository: ${{steps.submission-file-tests.outputs.repository}}
              path: second
        - name: run-model-tests
          run: conda run -n ewatercycle --no-capture-output python main.py
        - name: run-model-tests-as-output
          run: echo "RESULT=$(conda run -n ewatercycle --no-capture-output python main.py)" >> "$GITHUB_ENV" 
      # OR imitates an if here as linux checks the first command first
        - name: fail-on-tests-failing
          run: |
              [ "${{env.RESULT}}" == "tests passed!" ] || exit 1
